{"version":3,"sources":["components/Card.tsx","components/Field.tsx","components/Hand.tsx","helpers/WordChecker.tsx","components/Submit.tsx","components/ScoreNotification.tsx","components/App.tsx","reportWebVitals.ts","helpers/Deck.tsx","state/reducer.tsx","state/store.tsx","index.tsx"],"names":["Card","props","dispatch","useDispatch","className","onClick","e","place","type","pos","position","letter","fieldSelector","state","field","Field","useSelector","map","card","index","handSelector","hand","Hand","dictionary","require","Submit","submitWord","word","c","join","toLowerCase","console","log","checkWord","score","length","setTimeout","store","useStore","getState","disabled","ScoreNotification","text","selector","notification","App","result","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","letters","draw","x","q","push","Math","floor","random","initialGameState","createStore","action","concat","handCopy","splice","fieldCopy","clone","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3909533.chunk.js","sourcesContent":["import { type } from \"os\";\nimport { useDispatch } from \"react-redux\";\nimport \"../css/Card.css\"\nimport Letter from \"../helpers/Letter\";\nimport { Action, AddCardToHand } from \"../state/action\";\n\nexport type CardProps = {\n  position : number\n  place : \"hand\" | \"field\"\n  letter : Letter\n}\n\nfunction Card(props : CardProps) {\n\n   const dispatch = useDispatch()\n\n   const handleKeyDown = (e : React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    props.place==\"hand\"?dispatch({type:\"hand/toField\",pos:props.position}):\n    dispatch({type:\"field/toHand\",pos:props.position})\n  }\n\n    return (\n      <div className=\"Card\" onClick={handleKeyDown}>\n          {props.letter}\n      </div>\n    );\n  }\n  \nexport default Card\n","import Card from \"./Card\"\nimport \"../css/Field.css\"\nimport React, { useState } from 'react';\nimport { GameState } from \"../state/GameState\";\nimport { useSelector } from \"react-redux\";\n\nconst fieldSelector = (state: GameState) => state.field\nfunction Field() {\n\n  const field = useSelector(fieldSelector)\n\n  return (\n    <div className=\"Field\">\n      {field.map(\n        (card,index) => <Card letter={card.letter} key={index} position={index} place=\"field\"></Card>\n      )}\n    </div>\n  );\n}\n\n\n\nexport default Field","import Card from \"./Card\"\nimport \"../css/Hand.css\"\nimport React, { useState } from 'react';\nimport { GameState } from \"../state/GameState\";\nimport { useSelector } from \"react-redux\";\n\nconst handSelector = (state : GameState) => state.hand\n\nfunction Hand() {\n  const hand = useSelector(handSelector)\n  return (\n    <div className=\"Hand\">\n      {hand.map(\n        (card,index) => <Card letter={card.letter} key={index} position={index} place=\"hand\"></Card>\n      )}\n    </div>\n  );\n}\n\n\n\nexport default Hand","\nconst dictionary = require(\"../words.json\")\nexport default function checkWord(word: string) : Boolean{\n    console.log(dictionary)\n    console.log(word)\n    if(dictionary[word]===1){\n        return true\n    }\n    return false\n}","import \"../css/Submit.css\"\nimport { GameState } from \"../state/GameState\";\nimport { useDispatch, useSelector, useStore } from \"react-redux\";\nimport { CardInfo } from \"../helpers/CardInfo\";\nimport checkWord from \"../helpers/WordChecker\";\nconst fieldSelector = (state: GameState) => state.field\n\nfunction Submit() {\n    const dispatch = useDispatch()\n    const submitWord = (state: GameState) => {\n        let word = state.field.map((c: CardInfo) => c.letter).join(\"\").toLowerCase()\n        let correct = checkWord(word)\n        if (correct) {\n            dispatch({type:\"submitted/correct\",score: word.length})\n            setTimeout(()=>dispatch({type:\"notification/remove\"}),1000)\n        } else {\n            dispatch({type:\"submitted/wrong\",word: word})\n            setTimeout(()=>dispatch({type:\"notification/remove\"}),1000)\n        }\n    }\n\n    const hand = useSelector(fieldSelector)\n    const store = useStore()\n    return (\n        <button className=\"Submit\"\n            onClick={() => console.log(submitWord(store.getState()))}\n            disabled={hand.length < 3}>PLAY WORD</button>\n    );\n}\n\nexport default Submit","import \"../css/ScoreNotification.css\"\n\n\nexport type ScoreNotificationProps = {\n    text: String\n}\n\nfunction ScoreNotification(props : ScoreNotificationProps) {\n  return (\n    <div className=\"ScoreNotification\"> \n        {props.text}\n    </div>\n  );\n}\n\nexport default ScoreNotification","import '../css/App.css';\nimport Field from './Field';\nimport React, { useState } from 'react';\nimport Hand from './Hand';\nimport Submit from './Submit';\nimport ScoreNotification from \"./ScoreNotification\"\nimport { GameState } from '../state/GameState';\nimport { useSelector } from 'react-redux';\n\nconst selector = (state : GameState) => {\n  return {\n    notification: state.notification,\n    score: state.score\n  }\n}\n\nfunction App() {\n  \n  const result = useSelector(selector)\n\n  return (\n    <div className=\"App\">\n      <div className=\"Score\">Score: {result.score}</div>\n      {result.notification?<ScoreNotification text={result.notification}></ScoreNotification>:<div></div>}\n      <Field></Field>\n      <Submit></Submit>\n      <Hand></Hand>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CardInfo } from \"./CardInfo\";\nimport Letter from \"./Letter\";\nconst letters : Letter[]= [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\n\nexport default function draw(x: number) : CardInfo[] {\n    let result : CardInfo[] = []\n    for(let q=0;q<x;q++){\n        result.push({\n            letter: letters[Math.floor(Math.random() * letters.length)]\n        })\n    }\n    return result\n}","import { stat } from \"fs\";\nimport Hand from \"../components/Hand\";\nimport draw from \"../helpers/Deck\";\nimport { Action, AddCardToHand, FieldToHand, HandToField } from \"./action\";\nimport { GameState } from \"./GameState\";\n\nconst initialGameState : GameState = {\n    score: 0,\n    hand: draw(7),\n    field: []\n}\n\nexport default function rootReducer(state : GameState = initialGameState, action: Action) {\n    // always return a new object for the root state\n    switch (action.type){\n        case \"hand/add\" :{\n            return {\n                ...state,\n                hand: state.hand.concat({letter:\"A\"})\n            }\n        }\n        case \"hand/toField\" : {\n            let card = state.hand[action.pos]\n            let handCopy = [...state.hand]\n            handCopy.splice(action.pos,1)\n            return{\n                ...state,\n                hand: handCopy,\n                field: state.field.concat(card)\n            }\n        }\n        case \"field/toHand\" : {\n            let card = state.field[action.pos]\n            let fieldCopy = [...state.field]\n            fieldCopy.splice(action.pos,1)\n            return{\n                ...state,\n                field: fieldCopy,\n                hand: state.hand.concat(card)\n            }\n        }\n        case \"submitted/correct\" : {\n            return{\n                ...state,\n                score: state.score + action.score,\n                notification: `+${action.score} points!`,\n                hand: draw(7),\n                field: []\n            }\n        }\n\n        case \"submitted/wrong\" : {\n            return{\n                ...state,\n                notification: `${action.word} is not a word!`\n            }\n        }\n        case \"notification/remove\" : {\n            let clone = {...state}\n            delete clone.notification\n            return clone\n        }\n    }\n    return state\n}","import { applyMiddleware, createStore } from 'redux'\nimport rootReducer from './reducer'\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport const store = createStore(rootReducer,composeWithDevTools(applyMiddleware()))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from \"./state/store\"\n\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}