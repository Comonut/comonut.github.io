{"version":3,"sources":["WordInput.js","Result.js","App.js","serviceWorker.js","index.js"],"names":["WordInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","console","log","handler","target","value","pos","react_default","a","createElement","className","onChange","autoFocus","React","Component","Result","response","App","state","words","vectors","NaN","changeWord","word","setState","replaceWord","vectorDistance","v1","v2","distance","i","Math","sqrt","calculateResponse","v3","vResult","push","minDistance","minWord","d","_i","_entries","entries","length","entry","require","obj","values","src_WordInput","src_Result","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79c9c378.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass WordInput extends React.Component {\n\n    constructor(props) {\n      super(props);\n    }\n\n    handleChange = (event) => {\n      console.log(\"change\")\n      this.props.handler(event.target.value,this.props.pos)           \n    }\n  \n    render() {\n      return (\n          <div className = \"word-input\" onChange={this.handleChange}>\n            <input className = \"input\" autoFocus/>\n          </div>\n       \n      );\n    }\n  }\nexport default WordInput;","import React from 'react';\nimport './App.css';\n\nclass Result extends React.Component {\n\n    constructor(props) {\n      super(props);\n    }\n\n    render() {\n      return (\n          <div className = \"result\">\n             {this.props.response}\n          </div>\n      );\n    }\n  }\nexport default Result;","import React from 'react';\nimport WordInput from './WordInput.js'\nimport Result from './Result.js'\nimport './App.css';\n\nclass App extends React.Component {\n\n  state = {\n    words: [\"\",\"\",\"\"],\n    vectors: NaN,\n    response: \"Type words to get analogy\"\n  }\n\n  constructor(props) {\n    super(props);\n    this.state.vectors = require(\"./vectors.json\")\n    \n  }\n\n  changeWord = (word,pos) => {\n    // this.setState({words: [\"bish\",\"bash\",\"bosh\"]});\n    console.log(\"test2\")\n    this.setState(this.replaceWord(this.state,word,pos))\n  }\n\n  vectorDistance = (v1,v2) =>{\n    var distance = 0.0\n    for (var i = 0; i < 300; i++) { \n      distance += (v1[i]-v2[i]) * (v1[i]-v2[i])\n    }\n\n    return Math.sqrt(distance)\n  }\n\n  calculateResponse = (words) =>{\n\n    for(i =0; i < 3; i++){\n      if(!this.state.vectors[words[i]]){\n        return \"no vec for \" + words[i]\n      }\n    }\n\n    console.log(words)\n    var v1 = this.state.vectors[words[0]]\n    var v2 = this.state.vectors[words[1]]\n    var v3 = this.state.vectors[words[2]]\n\n    var vResult = []\n\n    for (var i = 0; i < 300; i++) { \n      vResult.push(-v1[i]+v2[i]+v3[i])\n    }\n\n    var minDistance = 20000000\n    var minWord = \"\"\n    var d = 0\n    const entries = Object.entries(this.state.vectors)\n    for (const entry of entries) {\n      d = this.vectorDistance(vResult,entry[1])\n      if (d< minDistance){\n        minDistance = d\n        minWord = entry[0]\n        console.log(minWord)\n      }\n    }\n\n    \n\n    return minWord\n\n    \n  }\n\n  replaceWord(obj,word,pos){\n    var values =obj.words\n    values[pos] = word\n    return{\n      words: values,\n      response: this.calculateResponse(values)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        Word2Vec Analogy Search\n      </header>\n\n\n      <div className=\"Inputs\">\n        <div className = \"top\">       \n          <WordInput handler={this.changeWord} pos={0}/>\n          is to\n          <WordInput handler={this.changeWord} pos={1}/>\n        </div>\n        as\n        <div className = \"bottom\">\n          <WordInput handler={this.changeWord} pos={2}/>\n          is to\n          <Result response={this.state.response}/>\n        </div>\n\n\n      </div>\n    </div>\n     \n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}